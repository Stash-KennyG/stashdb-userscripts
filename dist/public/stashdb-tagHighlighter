// ==UserScript==
// @name         Highlight Data Matches for StashResults
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Highlights the Date field if all YY, MM, and DD components match in the title
// @author       KennyG
// @match        http://mini01.shannabower.com:9999/scenes*
// @match        http://mini01.shannabower.com:9999/groups*
// @grant        none
// @run-at       document-end
// @icon        https://raw.githubusercontent.com/stashapp/stash/develop/ui/v2.5/public/favicon.png
// ==/UserScript==

(function () {
    'use strict';

    // Global constant for color
    const HIGHLIGHT_COLOR = '#00796B'; // Teal color

    // Function to check if date components (YY, MM, DD) are found in the title
    function checkDateInTitle(dateText, titleText) {

        let dateMatch = dateText.match(/^(\d{4})-(\d{2})-(\d{2})$/);
        const [_, year, searchMM, searchDD] = dateMatch;
        const searchYY = year.slice(2); // Get the last two digits of the year (YY)


        // Check if each component exists in the title
        const components = [searchYY, searchMM, searchDD];
        let matchCount = 0;

        components.forEach(component => {
            if(titleText.includes(component)) {
                matchCount++;
            }
        });

        return matchCount === 3; // All components must be found in the title
    }

    function highlightField(fieldObject){
        fieldObject.style.backgroundColor = HIGHLIGHT_COLOR // Teal
        fieldObject.style.color = '#FFFFFF';
        const anchorTag = fieldObject.querySelector('a');
        if (anchorTag) {
            anchorTag.style.color = '#FFFFFF'; // Change anchor text color to white
        }
    }

    function multiHighlight(fieldObj, targetText)
    {

        const fieldText = fieldObj.textContent.trim().toLowerCase();
        const target = targetText.trim().toLowerCase();
        const fieldWords = fieldText.split(/\s+/); //split whitespace
        let matchCount = 0;

        fieldWords.forEach(word => {
           if (target.includes(word)) {
               matchCount++;
           }
        });

        const matchPercentage = (matchCount / fieldWords.length) * 100;
        const opacity = Math.min(matchPercentage, 100); // Limit opacity to 100%

        // Apply the highlight with calculated opacity
        fieldObj.style.backgroundColor = `rgba(${parseInt(HIGHLIGHT_COLOR.slice(1, 3), 16)}, ${parseInt(HIGHLIGHT_COLOR.slice(3, 5), 16)}, ${parseInt(HIGHLIGHT_COLOR.slice(5, 7), 16)}, ${opacity / 100})`;
        fieldObj.style.color = '#FFFFFF'; // White text
    }

    // Function to highlight the date field if there is a match
    function highlightMatches() {
        let rowcount=0;
        const searchItems = document.querySelectorAll('div.search-item'); // Get all search-item divs
        searchItems.forEach(searchItem => {
            rowcount++
            // Get potential fields (optional-field-content) inside the search-item
            let resultFields = searchItem.querySelectorAll('.optional-field-content');
            // Get the Title
            let titleText = searchItem.querySelector('a.scene-link').textContent.trim(); // Get the title text

            // Loop through the date fields and find and highlight the matches
            resultFields.forEach(field => {
                let matchText = field.textContent.trim();

                //Don't process the local matches or the empty elements
               if (matchText === "" || matchText.substring(0, 8) === "Matched:") {
                   return; // Skip to the next iteration
               }

                let isoDateMatch = field.textContent.match(/^\d{4}-\d{2}-\d{2}$/); // Check for ISO date format (YYYY-MM-DD)
                if (isoDateMatch) {
                    if (checkDateInTitle(matchText, titleText)) {
                        // Highlight the field in green and change the text color to white
                        highlightField(field);
                    }
                }
                else {
                    if (titleText.includes(matchText))
                    {
                        // Highlight the date field in green and change the text color to white
                        highlightField(field);
                    }
                    else
                    {
                        multiHighlight(field,titleText);
                    }
                }
            });

            // Get the entities, loop through and highlight
            let entityFields = searchItem.querySelectorAll('.entity-name');
            entityFields.forEach(obfield => {
                let matchText = obfield.textContent.split(':')[1].trim();
                let matchLabel = obfield.textContent.split(':')[0].trim();
                if (titleText.includes(matchText)){
                    highlightField(obfield);
                } else{ //We need to check for studio smush or performer dotSpaces
                    if (matchLabel == "Studio")
                    {
                        matchText = matchText.replace(/ /g, "");
                    }
                    if (matchLabel == "Performer") {
                        matchText = matchText.replace(/ /g, ".");
                    }

                    if (titleText.includes(matchText)){
                        highlightField(obfield);
                    }
                }
            });
        });
    }

    // MutationObserver to watch for DOM changes and trigger the highlight function
    const observer = new MutationObserver(highlightMatches);
    observer.observe(document.body, { childList: true, subtree: true });

    // Initial execution of the highlightDateMatches function when the page is loaded
    window.addEventListener('load', highlightMatches);
})();

